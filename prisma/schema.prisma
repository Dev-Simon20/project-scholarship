generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  admin
  social_worker
}

enum NotificationType {
  success
  error
  info
  warning
}

// estado de subida de docuemntos del estudiante
enum StudentUploadStatus {
  pending
  in_progress
  completed
}

// estado del proceso
enum SocialWorkerReviewStatus {
  pending
  in_review
  to_be_interviewed
  interviewed
  approved
  rejected
  changes_requested
}

// esatdo de un solo documento
enum ReviewStatus {
  Pending
  Approved
  NeedsChanges
}

enum DocumenType {
  image
  video
  document
}

enum AllowedFileTypes {
  // Im√°genes
  jpg
  jpeg
  png
  gif
  svg
  webp
  // Documentos
  pdf
  doc
  docx
  txt
  // Videos
  mp4
  mov
  avi
  mkv
  webm
}

model User {
  id              String    @id @default(cuid())
  names           String
  first_lastname  String
  second_lastname String
  phone_number    String
  email           String    @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            Role      @default(student)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts      Account[]
  notifications Notification[]
  students      Student[]
  Admins        Admin[]
  SocialWorkers SocialWorker[]
}

model Student {
  user_id             String        @id
  user                User          @relation(fields: [user_id], references: [id])
  code_university     String
  school_id           Int
  enrrolled_semesters String
  user_process        UserProcess[]
  school              School        @relation(fields: [school_id], references: [id])
}

model Faculty {
  id           Int            @id @default(autoincrement())
  name         String
  schools      School[]
  socialWorker SocialWorker[]
}

model School {
  id         Int       @id @default(autoincrement())
  faculty_id Int
  name       String
  faculty    Faculty   @relation(fields: [faculty_id], references: [id])
  students   Student[]
}

model Admin {
  user_id               String               @id
  user                  User                 @relation(fields: [user_id], references: [id])
  management_start_date DateTime             @default(now())
  scholarship_process   ScholarshipProcess[]
}

model SocialWorker {
  user_id               String        @id
  user                  User          @relation(fields: [user_id], references: [id])
  assigned_faculties    Faculty[]
  employment_start_date DateTime      @default(now())
  user_process          UserProcess[]
}

model Notification {
  id         Int              @id @default(autoincrement())
  user_id    String
  title      String
  message    String
  type       NotificationType
  created_at DateTime         @default(now())
  read       Boolean
  user       User             @relation(fields: [user_id], references: [id])
}

model ScholarshipProcess {
  id             Int           @id @default(autoincrement())
  created_by     String
  title          String
  sub_title      String
  comment        String
  steps_count    Int
  open_date      DateTime
  close_date     DateTime
  admin          Admin         @relation(fields: [created_by], references: [user_id])
  user_processes UserProcess[]
  requirements   Requirement[]
}

model UserProcess {
  id                          Int                      @id @default(autoincrement())
  student_id                  String
  social_worker_id            String
  sccholarship_process_id     Int
  student_upload_status       StudentUploadStatus
  social_worker_review_status SocialWorkerReviewStatus
  student                     Student                  @relation(fields: [student_id], references: [user_id])
  sccholarship_process        ScholarshipProcess       @relation(fields: [sccholarship_process_id], references: [id])
  social_worker               SocialWorker             @relation(fields: [social_worker_id], references: [user_id])
  user_documents              UserDocument[]
}

model Requirement {
  id                   Int                @id @default(autoincrement())
  process_id           Int
  title                String
  sub_title            String
  step_number          Int
  max_size_mb          String
  document_type        DocumenType
  allowed_file_types   AllowedFileTypes[]
  sccholarship_process ScholarshipProcess @relation(fields: [process_id], references: [id])
  user_documents       UserDocument[]
}

model UserDocument {
  id              Int          @id @default(autoincrement())
  user_process_id Int
  requirement_id  Int
  file_url        String
  review_status   ReviewStatus
  user_process    UserProcess  @relation(fields: [user_process_id], references: [id])
  Requirement     Requirement  @relation(fields: [requirement_id], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}
